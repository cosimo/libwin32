#
# you will need to apply these with "patch -p1 -N < this_file"
#
# A working "patch" for win32 can be obtained from:
#
#    http://www-personal.umich.edu/~gsar/patch2_1-win32.tar.gz
#

--- perl5.003_99_1/EXTERN.h.dist	Sun Apr 27 00:09:56 1997
+++ perl5.003_99_1/EXTERN.h	Sat May 03 11:04:48 1997
@@ -30,10 +30,17 @@
 #      define EXTCONST __declspec(dllexport) const
 #      define dEXTCONST const
 #    else
-#      define EXT __declspec(dllimport)
-#      define dEXT 
-#      define EXTCONST __declspec(dllimport) const
-#      define dEXTCONST const
+#      if defined(__cplusplus)
+#        define EXT extern __declspec(dllimport)
+#        define dEXT 
+#        define EXTCONST extern __declspec(dllimport) const
+#        define dEXTCONST const
+#      else
+#        define EXT __declspec(dllimport)
+#        define dEXT 
+#        define EXTCONST __declspec(dllimport) const
+#        define dEXTCONST const
+#      endif
 #    endif
 #  else
 #    define EXT extern
--- perl5.003_99_1/win32/include/sys/socket.h.dist	Sun Apr 27 00:10:10 1997
+++ perl5.003_99_1/win32/include/sys/socket.h	Sat May 03 11:05:58 1997
@@ -3,12 +3,12 @@
 // djl
 // Provide UNIX compatibility
 
-#ifdef __cplusplus
-extern "C" {
-#endif
 #ifndef  _INC_SYS_SOCKET
 #define  _INC_SYS_SOCKET
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 
 #ifndef  _WINDOWS_
 #define  _WINDOWS_
--- perl5.003_99_1/win32/config.w32.dist	Fri May 02 13:00:41 1997
+++ perl5.003_99_1/win32/config.w32	Fri May 02 14:21:34 1997
@@ -35,11 +35,11 @@
 Locker=''
 Log='$Log'
 Mcc='Mcc'
-PATCHLEVEL='3'
+PATCHLEVEL='~PATCHLEVEL~'
 POSIX_cflags='ccflags="$ccflags -DSTRUCT_TM_HASZONE"'
 RCSfile='$RCSfile'
 Revision='$Revision'
-SUBVERSION='0'
+SUBVERSION='~SUBVERSION~'
 Source=''
 State=''
 afs='false'
--- perl5.003_99_1/win32/config_sh.PL.dist	Fri May 02 13:00:41 1997
+++ perl5.003_99_1/win32/config_sh.PL	Fri May 02 14:43:29 1997
@@ -4,6 +4,8 @@
   $opt{$1}=$2;
   shift(@ARGV);
  }
+
+@opt{'PATCHLEVEL','SUBVERSION'} = ($] =~ /\.0*([1-9]+)(\d\d)$/);
 while (<>)
  {
   s/~([\w_]+)~/$opt{$1}/g;
--- perl5.003_99_1/lib/Sys/Hostname.pm.dist	Fri May 02 12:55:13 1997
+++ perl5.003_99_1/lib/Sys/Hostname.pm	Fri May 02 15:19:06 1997
@@ -60,6 +60,10 @@
     Carp::croak "Cannot get host name of local machine";  
 
   }
+  elsif ($^O eq 'MSWin32') {
+    chomp($host = `hostname 2> NUL`) unless ($host = $ENV{'COMPUTERNAME'});
+    return $host;
+  }
   else {  # Unix
 
     # method 2 - syscall is preferred since it avoids tainting problems
--- perl5.003_99_1/README.win32.dist	Fri May 02 13:00:02 1997
+++ perl5.003_99_1/README.win32	Fri May 02 19:52:58 1997
@@ -8,7 +8,7 @@
 
 =head1 SYNOPSIS
 
-These are instructions for building Perl under WindowsNT (versions
+These are instructions for building Perl under Windows NT (versions
 3.51 or 4.0), using Visual C++ (versions 2.0 through 5.0).  Currently,
 this port may also build under Windows95, but you can expect problems
 stemming from the unmentionable command shell that infests that
@@ -31,22 +31,25 @@
 particular, you can safely ignore any information that talks about
 "Configure".
 
-You should probably also read the README.os2 file, which gives a
-different set of rules to build a Perl that will work on Win32
-platforms.  That method will probably enable you to build a more
-Unix-compatible perl, but you will also need to download and use
-various other support software described in that file.
+You may also want to look at two other options for building
+a perl that will work on Windows NT:  the README.cygwin32 and
+README.os2 files, which give a different set of rules to build a
+Perl that will work on Win32 platforms.  Those two methods will
+probably enable you to build a more Unix-compatible perl, but you
+will also need to download and use various other build-time and
+run-time support software described in those files.
 
 This set of instructions is meant to describe a so-called "native"
 port of Perl to Win32 platforms.  The resulting Perl requires no
 additional software to run (other than what came with your operating
 system).  Currently, this port is only capable of using Microsoft's
 Visual C++ compiler.  The ultimate goal is to support the other major
-compilers that can be used to build Win32 applications.
+compilers that can generally be used to build Win32 applications.
 
 This port currently supports MakeMaker (the set of modules that
 is used to build extensions to perl).  Therefore, you should be
 able to build and install most extensions found in the CPAN sites.
+See the L<Usage Hints> section for general hints about this.
 
 =head2 Setting Up
 
@@ -61,13 +64,15 @@
 
 =item *
 
-Run the VCVARS32.BAT file usually found somewhere like C:\MSDEV4.2\BIN.
-This will set your build environment.
+If you did not choose to always initialize the Visual C++ compilation
+environment variables when you installed Visual C++ on your system, you
+will need to run the VCVARS32.BAT file usually found somewhere like
+C:\MSDEV4.2\BIN.  This will set your build environment.
 
 =item *
 
 Depending on how you extracted the distribution, you have to make sure
-all the files are writable by you.  The easiest way to make sure of
+some of the files are writable by you.  The easiest way to make sure of
 this is to execute:
 
 	attrib -R *.* /S
@@ -100,7 +105,7 @@
 
 This should build everything.  Specifically, it will create perl.exe,
 perl.dll, and perlglob.exe at the perl toplevel, and various other
-extension dll's under the lib\auto directory.  If the make fails for
+extension dll's under the lib\auto directory.  If the build fails for
 any reason, make sure you have done the previous steps correctly.
 
 =back
@@ -118,23 +123,172 @@
 =head2 Installation
 
 Type "nmake install".  This will put the newly built perl and the
-libraries under "C:\PERL" (actually whatever you set INST_TOP to
-in the Makefile).  To use the Perl you just installed, set your
-PATH environment variable to "C:\PERL\BIN" (or $(INST_TOP)\BIN, if you
+libraries under "C:\perl" (actually whatever you set C<INST_TOP> to
+in the Makefile).  It will also install the pod documentation under
+C<$INST_TOP\lib\pod> and HTML versions of the same under
+C<$INST_TOP\lib\pod\html>.  To use the Perl you just installed, set your
+PATH environment variable to "C:\perl\bin" (or C<$INST_TOP\bin>, if you
 changed the default as above).
 
+=head2 Usage Hints
+
+=over 4
+
+=item Environment Variables
+
+The installation paths that you set during the build get compiled
+into perl, so you don't have to do anything additional to start
+using that perl (except add its location to your PATH variable).
+
+If you put extensions in unusual places, you can set PERL5LIB
+to a list of paths separated by semicolons where you want perl
+to look for libraries.  Look for descriptions of other environment
+variables you can set in the perlrun podpage.
+
+Sometime in the future, some of the configuration information
+for perl will be moved into the Windows registry.
+
+=item Using perl from the command line
+
+If you are accustomed to using perl from various command-line
+shells found in UNIX environments, you will be less than pleased
+with what Windows NT offers by way of a command shell.
+
+The crucial thing to understand about the "cmd" shell (which is
+the default on Windows NT) is that it does not do any wildcard
+expansions of command-line arguments (so wildcards need not be
+quoted).  It also provides only rudimentary quoting.  The only
+(useful) quote character is the double quote (").  It can be used to
+protect spaces in arguments and other special characters.  The
+Windows NT documentation has almost no description of how the
+quoting rules are implemented, but here are some general observations
+based on experiments:  The shell breaks arguments at spaces and
+passes them to programs in argc/argv.  Doublequotes can be used
+to prevent arguments with spaces in them from being split up.
+You can put a double quote in an argument by escaping it with
+a backslash and enclosing the whole argument within double quotes.
+The backslash and the pair of double quotes surrounding the
+argument will be stripped by the shell.
+
+The file redirection characters "<", ">", and "|" cannot be quoted
+by double quotes (there are probably more such).  Single quotes
+will protect those three file redirection characters, but the
+single quotes don't get stripped by the shell (just to make this
+type of quoting completely useless).  The caret "^" has also
+been observed to behave as a quoting character (and doesn't get
+stripped by the shell also).
+
+Here are some examples of usage of the "cmd" shell:
+
+This prints two doublequotes:
+
+    perl -e "print '\"\"' "
+
+This does the same:
+
+    perl -e "print \"\\\"\\\"\" "
+
+This prints "bar" and writes "foo" to the file "blurch":
+
+    perl -e "print 'foo'; print STDERR 'bar'" > blurch
+
+This prints "foo" ("bar" disappears into nowhereland):
+
+    perl -e "print 'foo'; print STDERR 'bar'" 2> nul
+
+This prints "bar" and writes "foo" into the file "blurch":
+
+    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch
+
+This prints "foo" and writes "bar" to the file "blurch":
+
+    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch
+
+This pipes "foo" to the "less" pager and prints "bar" on the console:
+
+    perl -e "print 'foo'; print STDERR 'bar'" | less
+
+This pipes "foo\nbar\n" to the less pager:
+
+    perl -le "print 'foo'; print STDERR 'bar'" |& less
+
+This does the same thing as the above:
+
+    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less
+
+This pipes "foo" to the pager and writes "bar" in the file "blurch":
+
+    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less
+
+
+Discovering the usage of the "command.com" shell on Windows 95
+is left as an exercise to the reader :)
+
+=item Building Extensions
+
+The Comprehensive Perl Archive Network (CPAN) offers a wealth
+of extensions, some of which require a C compiler to build.
+Look in http://www.perl.com/ for more information on CPAN.
+
+Most extensions (whether they require a C compiler or not) can
+be built, tested and installed with the standard mantra:
+
+    perl Makefile.PL
+    nmake
+    nmake test
+    nmake install
+
+Note the NMAKE that comes with Visual C++ is required.  Some
+extensions may not provide a testsuite (so "nmake test"
+may not do anything, or fail), but most serious ones do.
+
+If a module implements XSUBs, you will need a C compiler (Visual C++
+versions 2.0 and above are currently supported).  You must make sure
+you have set up the environment for the compiler for command-line
+compilation.
+
+If a module does not build for some reason, carefully look at
+why it failed, and report problems to the module author.  If
+it looks like the extension building support is at fault, report
+that with full details of how the build failed using the perlbug
+utility.
+
+=item Miscellaneous Things
+
+A full set of HTML documentation is installed, so you should be
+able to use it if you have a web browser installed on your
+system.
+
+C<perldoc> is also a useful tool for browsing information contained
+in the documentation, especially in conjunction with a pager
+like C<less> (recent versions of which have Win32 support).  You may
+have to set the PAGER environment variable to use a specific pager.
+"perldoc -f foo" will print information about the perl operator
+"foo".
+
+If you find bugs in perl, you can run C<perlbug> to create a
+bug report (you may have to send it manually if C<perlbug> cannot
+find a mailer on your system).
+
+=back
+
 =head1 BUGS AND CAVEATS
 
-This is still very much an experimental port, and should be considered
-alpha quality software.  You can expect changes in virtually all of
-these areas: build process, installation structure, supported
-utilities/modules, and supported perl functionality.  Specifically,
-functionality specific to the Win32 environment may ultimately
-be supported as either core modules or extensions.
+This port has not been tested as extensively as we'd like, and
+therefore should be considered beta quality software.  You should
+expect changes in virtually all of these areas: build process,
+installation structure, supported utilities/modules, and supported
+perl functionality.  In particular, functionality specific to the
+Win32 environment may ultimately be supported as either core modules
+or extensions.  This means that you should be prepared to recompile
+extensions when binary incompatibilites arise due to changes in the
+internal structure of the code.
 
 If you have had prior exposure to Perl on Unix platforms, you will notice
 this port exhibits behavior different from what is documented.  Most of the
-differences fall under one of these categories.
+differences fall under one of these categories.  We do not consider
+any of them to be serious limitations (especially when compared to the
+limited nature of some of the Win32 OSes themselves :)
 
 =over 8
 
@@ -142,7 +296,8 @@
 
 C<stat()> and C<lstat()> functions may not behave as documented.  They
 may return values that bear no resemblance to those reported on Unix
-platforms, and some fields may be completely bogus.
+platforms, and some fields (like the the one for inode) may be completely
+bogus.
 
 =item *
 
@@ -163,11 +318,6 @@
 
 =item *
 
-The behavior of C<system()> or the C<qx[]> operator (a.k.a. "backticks"),
-when used to call interactive commands, is ill-defined.
-
-=item *
-
 C<$?> ends up with the exitstatus of the subprocess (this is different
 from Unix, where the exitstatus is actually given by "$? >> 8").
 Failure to spawn() the subprocess is indicated by setting $? to 
@@ -191,12 +341,12 @@
 
 =item *
 
-File globbing may not behave as on Unix platforms.
-
-=item *
-
-Not all of the utilities that come with the Perl distribution
-are supported yet.
+File globbing may not behave as on Unix platforms.  In particular,
+globbing does not understand wildcards in the pathname component,
+but only in the filename component.  In other words, something like
+"print <*/*.pl>" will not print all the perl scripts in all the
+subdirectories one level under the current one (like it does on
+UNIX platforms).
 
 =back
 
--- perl5.003_99_1/pod/perldelta.pod.dist	Fri May 02 13:02:57 1997
+++ perl5.003_99_1/pod/perldelta.pod	Fri May 02 17:33:35 1997
@@ -665,6 +665,39 @@
 have an entry with that key.  So even if you have 100 copies of the
 same hash, the hash keys never have to be reallocated.
 
+=head1 Support for More Operating Systems
+
+Support for the following operating systems is new in Perl 5.004.
+
+=head2 Win32
+
+Perl 5.004 now includes support for building a "native" perl under
+Windows NT, using the Microsoft Visual C++ compiler (versions 2.0
+and above).  The resulting perl can be used under Windows 95 (if it
+is installed in the same directory locations as it got installed
+in Windows NT).  This port includes support for perl extension
+building tools like L<MakeMaker> and L<h2xs>, so that many extensions
+available on the Comprehensive Perl Archive Network (CPAN) can now be
+readily built under Windows NT.  See http://www.perl.com/ for more
+information on CPAN, and L<README.win32> for more details on how to
+get started with building this port.
+
+There is also support for building perl under the Cygwin32 environment.
+Cygwin32 is a set of GNU tools that make it possible to compile and run
+many UNIX programs under Windows NT by providing a mostly UNIX-like 
+interface for compilation and execution.  See L<README.cygwin32> for
+more details on this port, and how to obtain the Cygwin32 toolkit.
+This port has not been as well tested as the "native" port described
+above (which is not as well tested as we'd like either :)
+
+=head2 Plan9
+
+See L<README.plan9>.
+
+=head2 QNX
+
+See L<README.qnx>.
+
 =head1 Pragmata
 
 Six new pragmatic modules exist:
--- perl5.003_99_1/lib/Sys/Hostname.pm	Sat May 03 11:31:10 1997
+++ perl5.003_99_2/lib/Sys/Hostname.pm	Sun May 04 10:59:06 1997
@@ -61,7 +61,8 @@
 
   }
   elsif ($^O eq 'MSWin32') {
-    chomp($host = `hostname 2> NUL`) unless ($host = $ENV{'COMPUTERNAME'});
+    ($host) = gethostbyname('localhost');
+    chomp($host = `hostname 2> NUL`) unless defined $host;
     return $host;
   }
   else {  # Unix
--- perl5.003_99/win32/perllib.c.dist	Sat May 03 11:21:52 1997
+++ perl5.003_99/win32/perllib.c	Wed May 07 00:37:34 1997
@@ -104,7 +104,7 @@
 EXTERN_C void boot_DynaLoader _((CV* cv));
 
 static
-XS(w32_GetCurrentDirectory)
+XS(w32_GetCwd)
 {
     dXSARGS;
     SV *sv = sv_newmortal();
@@ -126,22 +126,223 @@
 }
 
 static
+XS(w32_SetCwd)
+{
+    dXSARGS;
+    if (items != 1)
+	croak("usage: Win32::SetCurrentDirectory($cwd)");
+    if (SetCurrentDirectory(SvPV(ST(0),na)))
+	XSRETURN_YES;
+
+    XSRETURN_NO;
+}
+
+static
+XS(w32_GetNextAvailDrive)
+{
+    dXSARGS;
+    char ix = 'C';
+    char root[] = "_:\\";
+    while (ix <= 'Z') {
+	root[0] = ix++;
+	if (GetDriveType(root) == 1) {
+	    root[2] = '\0';
+	    XSRETURN_PV(root);
+	}
+    }
+    XSRETURN_UNDEF;
+}
+
+static
 XS(w32_GetLastError)
 {
-	dXSARGS;
-	XSRETURN_IV(GetLastError());
+    dXSARGS;
+    XSRETURN_IV(GetLastError());
+}
+
+static
+XS(w32_LoginName)
+{
+    dXSARGS;
+    char name[256];
+    DWORD size = sizeof(name);
+    if (GetUserName(name,&size)) {
+	/* size includes NULL */
+	ST(0) = sv_2mortal(newSVpv(name,size-1));
+	XSRETURN(1);
+    }
+    XSRETURN_UNDEF;
+}
+
+static
+XS(w32_NodeName)
+{
+    dXSARGS;
+    char name[MAX_COMPUTERNAME_LENGTH+1];
+    DWORD size = sizeof(name);
+    if (GetComputerName(name,&size)) {
+	/* size does NOT include NULL :-( */
+	ST(0) = sv_2mortal(newSVpv(name,size));
+	XSRETURN(1);
+    }
+    XSRETURN_UNDEF;
+}
+
+
+static
+XS(w32_DomainName)
+{
+    dXSARGS;
+    char name[256];
+    DWORD size = sizeof(name);
+    if (GetUserName(name,&size)) {
+	char sid[1024];
+	DWORD sidlen = sizeof(sid);
+	char dname[256];
+	DWORD dnamelen = sizeof(dname);
+	SID_NAME_USE snu;
+	if (LookupAccountName(NULL, name, &sid, &sidlen,
+			      dname, &dnamelen, &snu)) {
+	    XSRETURN_PV(dname);		/* all that for this */
+	}
+    }
+    XSRETURN_UNDEF;
+}
+
+static
+XS(w32_FsType)
+{
+    dXSARGS;
+    char fsname[256];
+    DWORD flags, filecomplen;
+    if (GetVolumeInformation(NULL, NULL, 0, NULL, &filecomplen,
+			 &flags, fsname, sizeof(fsname))) {
+	if (GIMME == G_ARRAY) {
+	    XPUSHs(sv_2mortal(newSVpv(fsname,0)));
+	    XPUSHs(sv_2mortal(newSViv(flags)));
+	    XPUSHs(sv_2mortal(newSViv(filecomplen)));
+	    PUTBACK;
+	    return;
+	}
+	XSRETURN_PV(fsname);
+    }
+    XSRETURN_UNDEF;
+}
+
+static
+XS(w32_GetOSVersion)
+{
+    dXSARGS;
+    OSVERSIONINFO osver;
+
+    osver.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
+    if (GetVersionEx(&osver)) {
+	XPUSHs(newSVpv(osver.szCSDVersion, 0));
+	XPUSHs(newSViv(osver.dwMajorVersion));
+	XPUSHs(newSViv(osver.dwMinorVersion));
+	XPUSHs(newSViv(osver.dwBuildNumber));
+	XPUSHs(newSViv(osver.dwPlatformId));
+	PUTBACK;
+	return;
+    }
+    XSRETURN_UNDEF;
 }
 
+static
 XS(w32_IsWinNT)
 {
-	dXSARGS;
-	XSRETURN_IV(IsWinNT());
+    dXSARGS;
+    XSRETURN_IV(IsWinNT());
 }
 
+static
 XS(w32_IsWin95)
 {
-	dXSARGS;
-	XSRETURN_IV(IsWin95());
+    dXSARGS;
+    XSRETURN_IV(IsWin95());
+}
+
+static
+XS(w32_FormatMessage)
+{
+    dXSARGS;
+    DWORD source = 0;
+    char msgbuf[1024];
+
+    if (items != 1)
+	croak("usage: Win32::FormatMessage($errno)");
+
+    if (FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
+		      &source, SvIV(ST(0)), 0,
+		      msgbuf, sizeof(msgbuf)-1, NULL))
+	XSRETURN_PV(msgbuf);
+
+    XSRETURN_UNDEF;
+}
+
+static
+XS(w32_Spawn)
+{
+    dXSARGS;
+    char *cmd, *args;
+    PROCESS_INFORMATION stProcInfo;
+    STARTUPINFO stStartInfo;
+    BOOL bSuccess = FALSE;
+
+    if(items != 3)
+	croak("usage: Win32::Spawn($cmdName, $args, $PID)");
+
+    cmd = SvPV(ST(0),na);
+    args = SvPV(ST(1), na);
+
+    memset(&stStartInfo, 0, sizeof(stStartInfo));   /* Clear the block */
+    stStartInfo.cb = sizeof(stStartInfo);	    /* Set the structure size */
+    stStartInfo.dwFlags = STARTF_USESHOWWINDOW;	    /* Enable wShowWindow control */
+    stStartInfo.wShowWindow = SW_SHOWMINNOACTIVE;   /* Start min (normal) */
+
+    if(CreateProcess(
+		cmd,			/* Image path */
+		args,	 		/* Arguments for command line */
+		NULL,			/* Default process security */
+		NULL,			/* Default thread security */
+		FALSE,			/* Must be TRUE to use std handles */
+		NORMAL_PRIORITY_CLASS,	/* No special scheduling */
+		NULL,			/* Inherit our environment block */
+		NULL,			/* Inherit our currrent directory */
+		&stStartInfo,		/* -> Startup info */
+		&stProcInfo))		/* <- Process info (if OK) */
+    {
+	CloseHandle(stProcInfo.hThread);/* library source code does this. */
+	sv_setiv(ST(2), stProcInfo.dwProcessId);
+	bSuccess = TRUE;
+    }
+    XSRETURN_IV(bSuccess);
+}
+
+static
+XS(w32_GetTickCount)
+{
+    dXSARGS;
+    XSRETURN_IV(GetTickCount());
+}
+
+static
+XS(w32_GetShortPathName)
+{
+    dXSARGS;
+    SV *shortpath;
+
+    if(items != 1)
+	croak("usage: Win32::GetShortPathName($longPathName)");
+
+    shortpath = sv_mortalcopy(ST(0));
+    SvUPGRADE(shortpath, SVt_PV);
+    /* src == target is allowed */
+    if (GetShortPathName(SvPVX(shortpath), SvPVX(shortpath), SvCUR(shortpath)))
+	ST(0) = shortpath;
+    else
+	ST(0) = &sv_undef;
+    XSRETURN(1);
 }
 
 static void
@@ -150,9 +351,36 @@
     char *file = __FILE__;
     dXSUB_SYS;
     newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);
-    newXS("Win32::GetCurrentDirectory", w32_GetCurrentDirectory, file);
+
+    /* XXX should be removed after checking with Nick */
+    newXS("Win32::GetCurrentDirectory", w32_GetCwd, file);
+
+    /* these names are Activeware compatible */
+    newXS("Win32::GetCwd", w32_GetCwd, file);
+    newXS("Win32::SetCwd", w32_SetCwd, file);
+    newXS("Win32::GetNextAvailDrive", w32_GetNextAvailDrive, file);
     newXS("Win32::GetLastError", w32_GetLastError, file);
+    newXS("Win32::LoginName", w32_LoginName, file);
+    newXS("Win32::NodeName", w32_NodeName, file);
+    newXS("Win32::DomainName", w32_DomainName, file);
+    newXS("Win32::FsType", w32_FsType, file);
+    newXS("Win32::GetOSVersion", w32_GetOSVersion, file);
     newXS("Win32::IsWinNT", w32_IsWinNT, file);
     newXS("Win32::IsWin95", w32_IsWin95, file);
+    newXS("Win32::FormatMessage", w32_FormatMessage, file);
+    newXS("Win32::Spawn", w32_Spawn, file);
+    newXS("Win32::GetTickCount", w32_GetTickCount, file);
+    newXS("Win32::GetShortPathName", w32_GetShortPathName, file);
+
+    /* XXX Bloat Alert! The following Activeware preloads really
+     * ought to be part of Win32::Sys::*, so they're not included
+     * here.
+     */
+    /* LookupAccountName
+     * LookupAccountSID
+     * InitiateSystemShutdown
+     * AbortSystemShutdown
+     * ExpandEnvrironmentStrings
+     */
 }
 
 

